import numpy as np
import networkx as nx
import matplotlib.pyplot as plt
import pandas as pd
import datetime
import pytz

class sv_graph:
    current_time = datetime.datetime.now(pytz.timezone('Asia/Kolkata'))

    def __init__(self, data):
        # copy and ensure correct types for masking
        self.data = data.copy()
        self.data['u'] = self.data['u'].astype(str)
        self.data['v'] = self.data['v'].astype(str)
        self.data['weight_'] = self.data['weight_'].astype(float)
        self.hub_id = self.data.iloc[0, 0]

    def graph_generator(self):
        # build graph from pre-cast data
        edge_list = list(zip(self.data['u'], self.data['v'], self.data['weight_']))
        G = nx.Graph()
        G.add_weighted_edges_from(edge_list)
        return G

    def cluster_classi(self, x):
        if x >= 10:
            return 'C1'
        if 3 < x < 10:
            return 'C2'
        return 'C3'

    def components_connected(self):
        comps = list(nx.connected_components(self.graph_generator()))
        return {i+1: comps[i] for i in range(len(comps))}

    def find_chains(self, subgraph):
        """
        Find chains (continuous segments) in the subgraph.
        Returns a list of chains, each chain is a list of nodes in order.
        """
        chains = []
        G = subgraph.copy()
        # Nodes with degree 1 are chain endpoints
        endpoints = [n for n, d in G.degree() if d == 1]

        visited = set()

        def traverse_chain(start):
            chain = [start]
            current = start
            prev = None
            while True:
                neighbors = list(G.neighbors(current))
                # Remove previous node to avoid going backward
                if prev is not None:
                    neighbors = [n for n in neighbors if n != prev]
                if len(neighbors) == 1:
                    next_node = neighbors[0]
                    chain.append(next_node)
                    prev = current
                    current = next_node
                else:
                    break
            return chain

        # Traverse from each endpoint to get chains
        for ep in endpoints:
            if ep not in visited:
                chain = traverse_chain(ep)
                chains.append(chain)
                visited.update(chain)

        # For cycles (no endpoints), consider the whole subgraph as one chain
        if not chains and len(G.nodes) > 0:
            # Just return the nodes in arbitrary order as a cycle chain
            chains.append(list(G.nodes))

        return chains

    def cc_info(self):
        rows = []
        G = self.graph_generator()
        for cid, nodes in self.components_connected().items():
            sub = G.subgraph(nodes)
            size_km = round(sub.size(weight='weight')/1000, 2)
            cls = self.cluster_classi(size_km)
            details = []
            for u, v, w in sub.edges(data='weight'):
                mask = ((self.data['u'] == u) & (self.data['v'] == v)) | ((self.data['u'] == v) & (self.data['v'] == u))
                for fpt in self.data.loc[mask, 'fprint'].unique():
                    details.append((u, v, w, fpt))

            # Find chains in this connected component
            chains = self.find_chains(sub)

            # Store chains as list of edges (tuples)
            chain_edges = []
            for chain in chains:
                chain_edges.append([(chain[i], chain[i+1]) for i in range(len(chain)-1)])

            rows.append({
                'hub_id':        self.hub_id,
                'cluster_classi': cls,
                'size':           size_km,
                'details':        details,
                'chains':         chain_edges  # new field added
            })
        return pd.DataFrame(rows)

class Inititiator:
    def __init__(self, df):
        self.df = df.copy()
        # ensure hub_id exists
        if 'driving_hub_id' in self.df.columns:
            self.df.rename(columns={'driving_hub_id': 'hub_id'}, inplace=True)

    def summary_df(self):
        all_cc = []
        for hub in self.df['hub_id'].unique():
            sg = sv_graph(self.df[self.df['hub_id'] == hub])
            cc = sg.cc_info()
            cc['hub_id'] = hub  # ensure column for grouping
            all_cc.append(cc)
        df_cc = pd.concat(all_cc, ignore_index=True)
        rows = []
        for hub, grp in df_cc.groupby('hub_id'):
            country = hub.split('-')[1].split('.')[0]
            row = {'hub_id': hub, 'country_code': country}
            for cls in ['C1','C2','C3']:
                sub = grp[grp.cluster_classi == cls]
                # kms & cluster count
                row[f'{cls}_kms']   = sub['size'].sum()
                row[f'{cls}_count'] = len(sub)
                # segments
                segs = {(u, v) for det in sub.details for (u, v, w, f) in det}
                row[f'{cls}_segments'] = list(segs)

                # chains (flatten list of lists of edges)
                chains = []
                for ch_list in sub['chains']:
                    chains.extend(ch_list)
                row[f'{cls}_chains'] = chains
            rows.append(row)
        return pd.DataFrame(rows)

    def details_df(self):
        rows = []
        for hub in self.df['hub_id'].unique():
            sg = sv_graph(self.df[self.df['hub_id'] == hub])
            cc = sg.cc_info()
            for _, rec in cc.iterrows():
                for u, v, w, fpt in rec['details']:
                    rows.append({
                        'hub_id':        rec.hub_id,
                        'cluster_classi': rec.cluster_classi,
                        'u':             u,
                        'v':             v,
                        'weight':        w,
                        'fprint':        fpt
                    })
        return pd.DataFrame(rows)

    def export_to_excel(self, path='hub_summary.xlsx'):
        s = self.summary_df()
        d = self.details_df()
        with pd.ExcelWriter(path, engine='xlsxwriter') as writer:
            s.to_excel(writer, sheet_name='Summary', index=False)
            d.to_excel(writer, sheet_name='Details', index=False)
        return path

# Usage with CSV file
df = pd.read_csv('C:/Users/visha/Downloads/hub_data.csv')
I = Inititiator(df)
print(I.summary_df())
out_path = I.export_to_excel("C:/Users/visha/Downloads/output_6.xlsx")
print('Wrote:', out_path)
